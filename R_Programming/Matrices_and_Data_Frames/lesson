- Class: meta
  Course: R Programming
  Lesson: Matrices and Data Frames
  Author: Nick Carchedi
  Type: Coursera
  Organization: JHU Biostatistics
  Version: 2.2.0

- Class: text
  Output: In this lesson, we'll cover matrices and data frames. Both represent 'rectangular' data types, meaning that they are used to store tabular data, with rows and columns.

- Class: text
  Output: The main difference, as you'll see, is that matrices can only contain a single class of data, while data frames can consist of many different classes of data.

- Class: cmd_question
  Output: Let's create a vector containing the numbers 1 through 20 using the `:` operator. Store the result in a variable called myVector.
  CorrectAnswer: myVector <- 1:20
  AnswerTests: omnitest(correctExpr='myVector <- 1:20')
  Hint: You learned about the `:` operator in the lesson on sequences. If you wanted to create a vector containing the numbers 1, 2, and 3 (in that order), you could use either c(1, 2, 3) or 1:3. In this case, we want the numbers 1 through 20 stored in a variable called myVector.

- Class: cmd_question
  Output: View the contents of the vector you just created.
  CorrectAnswer: myVector
  AnswerTests: omnitest(correctExpr='myVector')
  Hint: Type myVector to view its contents.

- Class: cmd_question
  Output: The dim() function tells us the 'dimensions' of an object. What happens if we do dim(myVector)? Give it try.
  CorrectAnswer: dim(myVector)
  AnswerTests: omnitest(correctExpr='dim(myVector)')
  Hint: Just type dim(myVector) to see what happens.

- Class: cmd_question
  Output: Clearly, that's not very helpful! Since myVector is a vector, it doesn't have a `dim` attribute (so it's just NULL), but we can find its length using the length() function. Try that now.
  CorrectAnswer: length(myVector)
  AnswerTests: omnitest(correctExpr='length(myVector)')
  Hint: Type length(myVector) to view the length of the vector you just created.

- Class: cmd_question
  Output: Ah! That's what we wanted. But, what happens if we give myVector a `dim` attribute? Let's give it a try. Type dim(myVector) <- c(4, 5).
  CorrectAnswer: dim(myVector) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(myVector) <- c(4, 5)')
  Hint: Type dim(myVector) <- c(4, 5) to give myVector a `dim` attribute.

- Class: text
  Output: It's okay if that last command seemed a little strange to you. It should! The dim() function allows you to get OR set the `dim` attribute for an R object. In this case, we assigned the value c(4, 5) to the `dim` attribute of myVector.

- Class: cmd_question
  Output: Use dim(myVector) to confirm that we've set the `dim` attribute correctly.
  CorrectAnswer: dim(myVector)
  AnswerTests: omnitest(correctExpr='dim(myVector)')
  Hint: Just type dim(myVector) to make sure the `dim` attribute has been set.

- Class: cmd_question
  Output: Another way to see this is by calling the attributes() function on myVector. Try it now.
  CorrectAnswer: attributes(myVector)
  AnswerTests: omnitest(correctExpr='attributes(myVector)')
  Hint: The command attributes(myVector) will show you all of the attributes for the myVector object.

- Class: text
  Output: Just like in math class, when dealing with a 2-dimensional object (think rectangular table), the first number is the number of rows and the second is the number of columns. Therefore, we just gave myVector 4 rows and 5 columns.

- Class: cmd_question
  Output: But, wait! That doesn't sound like a vector any more. Well, it's not. Now it's a matrix. View the contents of myVector now to see what it looks like.
  CorrectAnswer: myVector
  AnswerTests: omnitest(correctExpr='myVector')
  Hint: Type myVector to view its contents.

- Class: cmd_question
  Output: Now, let's confirm it's actually a matrix by using the class() function. Type class(myVector) to see what I mean.
  CorrectAnswer: class(myVector)
  AnswerTests: omnitest(correctExpr='class(myVector)')
  Hint: Type class(myVector) to view the class of myVector.

- Class: cmd_question
  Output: Sure enough, myVector is now a matrix. We should store it in a new variable that helps us remember what it is. Store the value of myVector in a new variable called myMatrix.
  CorrectAnswer: myMatrix <- myVector
  AnswerTests: omnitest(correctExpr='myMatrix <- myVector')
  Hint: Since we can't just change the name of our myVector variable, we'll assign its value to a new variable with myMatrix <- myVector.

- Class: text
  Output: The example that we've used so far was meant to illustrate the point that a matrix is simply an atomic vector with a dimension attribute. A more direct method of creating the same matrix uses the matrix() function.

- Class: cmd_question
  Output: Bring up the help file for the matrix() function now using the `?` function.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: The command ?matrix will do the trick.

- Class: cmd_question
  Output: Now, look at the documentation for the matrix function and see if you can figure out how to create a matrix containing the same numbers (1-20) by calling the matrix() function. Store the result in a variable called myMatrix2.
  CorrectAnswer: myMatrix2 <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: creates_val_identical_to('matrix(1:20, nrow=4, ncol=5)'); expr_creates_var('myMatrix2')
  Hint: Call the matrix() function with three arguments -- 1:20, the number of rows, and the number of columns. Be sure to specify arguments by their proper names and store the result in myMatrix2 (not in myMatrix).

- Class: cmd_question
  Output: Finally, let's confirm that myMatrix and myMatrix2 are actually identical. The identical() function will tell us if its first two arguments are the same. Try it out.
  CorrectAnswer: identical(myMatrix, myMatrix2)
  AnswerTests: omnitest(correctExpr='identical(myMatrix, myMatrix2)')
  Hint: If you're not sure about this one, then checkout the documentation for identical() using the `?` function.

- Class: text
  Output: Now, imagine that the numbers in our table represent some measurements from a clinical experiment, where each row represents one patient and each column represents one variable for which measurements where taken.

- Class: text
  Output: We may want to label the rows, so that we know which numbers belong to each patient in the experiment. One way to do this is to add a column to the matrix, which contains the names of all four people.

- Class: cmd_question
  Output: Let's start by creating a character vector containing the names of our patients -- Bill, Gina, Kelly, and Sean. Remember that double quotes tell R that something is a character string. Store the result in a variable called patients.
  CorrectAnswer: patients <- c("Bill", "Gina", "Kelly", "Sean")
  AnswerTests: omnitest(correctExpr='patients <- c("Bill", "Gina", "Kelly", "Sean")')
  Hint: Make sure to capitalize the first letter of each name and to store the result in a variable called patients. Also, don't get the order of the patients mixed up! That would be a disaster!

- Class: cmd_question
  Output: Now we'll use the cbind() function to 'combine columns'. Don't worry about storing the result in a new variable. Just call cbind() with two arguments -- the patients vector and myMatrix.
  CorrectAnswer: cbind(patients, myMatrix)
  AnswerTests: omnitest(correctExpr='cbind(patients, myMatrix)')
  Hint: Type cbind(patients, myMatrix) to add the names of our patients to the matrix of numbers.

- Class: text
  Output: Something is fishy about our result! It appears that combining the character vector with our matrix of numbers caused everything to be enclosed in double quotes. This means we're left with a matrix of character strings, which is no good.

- Class: text
  Output: If you remember back to the beginning of this lesson, I told you that matrices can only contain ONE class of data. Therefore, when we tried to combine a character vector with a numeric matrix, R was forced to 'coerce' the numbers to characters, hence the double quotes.

- Class: text
  Output: This is called 'implicit coersion', because we didn't ask for it. It just happened. But why didn't R just convert the names of our patients to numbers? I'll let you ponder that question on your own.

- Class: cmd_question
  Output: So, we're still left with the question of how to include the names of our patients in the table without destroying the intregrity of our numeric data. Try the following -- myData <- data.frame(patients, myMatrix)
  CorrectAnswer: myData <- data.frame(patients, myMatrix)
  AnswerTests: omnitest(correctExpr='myData <- data.frame(patients, myMatrix)')
  Hint: Type myData <- data.frame(patients, myMatrix), so we can explore what happens.

- Class: cmd_question
  Output: Now view the contents of myData to see what we've come up with.
  CorrectAnswer: myData
  AnswerTests: omnitest(correctExpr='myData')
  Hint: Type myData to view its contents.

- Class: text
  Output: It looks like the data.frame() function allowed us to store our character vector of names right alongside our matrix of numbers. That's exactly what we were hoping for! 

- Class: text
  Output: Behind the scenes, the data.frame() function takes any number of arguments and returns a single object of class `data.frame` that is composed of the original objects.

- Class: cmd_question
  Output: Let's confirm this by calling the class() function on our newly created data frame.
  CorrectAnswer: class(myData)
  AnswerTests: omnitest(correctExpr='class(myData)')
  Hint: The class function takes one argument -- the object of which you want to determine the class.

- Class: text
  Output: It's also possible to assign names to the individual rows and columns of a data frame, which presents another possible way of determining which row of values in our table belongs to each patient.

- Class: text
  Output: However, since we've already solved that problem, let's solve a different problem by assigning names to the columns of our data frame so that we know what type of measurement each column represents.

- Class: cmd_question
  Output: Since we have six columns (including patient names), we'll need to first create a vector containing one element for each column. Create a character vector called cnames that contains the following values (in order) -- "patient", "age", "weight", "bp", "rating", "test".
  CorrectAnswer: cnames <- c("patient", "age", "weight", "bp", "rating", "test")
  AnswerTests: omnitest(correctExpr='cnames <- c("patient", "age", "weight", "bp", "rating", "test")')
  Hint: Make sure all of the names are lowercase, surrounded by double quotes, and separated with commas. Don't forget to use the c() function.

- Class: cmd_question
  Output: Now, use the colnames() function to set the `colnames` attribute for our data frame. This is similar to the way we used the dim() function earlier in this lesson.
  CorrectAnswer: colnames(myData) <- cnames
  AnswerTests: omnitest(correctExpr='colnames(myData) <- cnames')
  Hint: Try colnames(myData) <- cnames.

- Class: cmd_question
  Output: Let's see if that got the job done. Print the contents of myData.
  CorrectAnswer: myData
  AnswerTests: omnitest(correctExpr='myData')
  Hint: Print the contents of myData to the console.

- Class: text
  Output: In this lesson, you learned the basics of working with two very important and common data structures -- matrices and data frames. There's much more to learn and we'll be covering more advanced topics, particularly with respect to data frames, in future lessons.
